<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
   <duplication lines="71" tokens="422">
      <file line="31"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\BaseJUnitAutoRunner.java"/>
      <file line="33"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\DefaultJUnitAutoRunner.java"/>
      <codefragment><![CDATA[	public BaseJUnitAutoRunner(final Class<?> klass)
			throws InitializationError {
		super(klass);
		setScheduler(new RunnerScheduler() {
			ExecutorService executorService = Executors.newFixedThreadPool(
                    klass.isAnnotationPresent(ThreadRunner.class) ?
                            klass.getAnnotation(ThreadRunner.class).threads() :
                            (int) (Runtime.getRuntime().availableProcessors() * 1.5),
                    new NamedThreadFactory(klass.getSimpleName()));
            CompletionService<Void> completionService = new ExecutorCompletionService<Void>(executorService);
            Queue<Future<Void>> tasks = new LinkedList<Future<Void>>();
			
			public void schedule(Runnable childStatement) {
				tasks.offer(completionService.submit(childStatement, null));
			}
			
			
			public void finished() {
				try {
                    while (!tasks.isEmpty())
                        tasks.remove(completionService.take());
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    while (!tasks.isEmpty())
                        tasks.poll().cancel(true);
                    executorService.shutdownNow();
                }
			}
			
		});
	}
	static final class NamedThreadFactory implements ThreadFactory {
        static final AtomicInteger poolNumber = new AtomicInteger(1);
        final AtomicInteger threadNumber = new AtomicInteger(1);
        final ThreadGroup group;

        NamedThreadFactory(String poolName) {
            group = new ThreadGroup(poolName + "-" + poolNumber.getAndIncrement());
        }

        
        public Thread newThread(Runnable r) {
            return new Thread(group, r, group.getName() + "-thread-" + threadNumber.getAndIncrement(), 0);
        }
    }
	
	
	protected Statement methodInvoker(FrameworkMethod method, Object test) {
		InterceptorStatement statement = new InterceptorStatement(method, test);
		//statement.addInterceptor(new ThreadLocalResetInterceptor());
		if(test.getClass().isAnnotationPresent(InterceptorClass.class)){
			InterceptorClass anno = test.getClass().getAnnotation(InterceptorClass.class);
			Class<?>[] clazzs = anno.value();
			try{
				for(Class<?> clazz : clazzs){
					statement.addInterceptor((Interceptor)clazz.newInstance());
				}
			}catch(IllegalAccessException ilex){
				ilex.printStackTrace();
			}catch(InstantiationException e){
				e.printStackTrace();
			}
		}
		return statement;
	//	return new InvokeMethod(method, test);
	}
	
	
	
	public void run(RunNotifier rn) {]]></codefragment>
   </duplication>
   <duplication lines="53" tokens="403">
      <file line="137"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="208"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <codefragment><![CDATA[			if(xn.getXMLChildElements().size()==0){
				try {
					return browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue()));
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
			}else{
				int index = 0;
				if(xn.getIndex()!=null){
					try{
						index=Integer.parseInt(xn.getIndex());
					}catch(NumberFormatException e){
						logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
						e.printStackTrace();
					}
				}
				try {
					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		} else if(xn.getElement().getParent().getName().equals("frame")){]]></codefragment>
   </duplication>
   <duplication lines="53" tokens="403">
      <file line="130"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <file line="200"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[			if(xn.getXMLChildElements().size()==0){
				try {
					return AutoBase.driver().findElements(xtj.locator(xn.getBy(), xn.getValue()));
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
			}else{
				int index = 0;
				if(xn.getIndex()!=null){
					try{
						index=Integer.parseInt(xn.getIndex());
					}catch(NumberFormatException e){
						logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
						e.printStackTrace();
					}
				}
				try {
					we=AutoBase.driver().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		} else if(xn.getElement().getParent().getName().equals("frame")){]]></codefragment>
   </duplication>
   <duplication lines="47" tokens="373">
      <file line="155"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="148"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		} else if(xn.getElement().getParent().getName().equals("frame")){
			int pindex = 0;
			XMLFrame xf = new XMLFrame();
			xf.setElement(xn.getElement().getParent());
			if(xf.getIndex()!=null){
				try{
					pindex=Integer.parseInt(xn.getIndex());
				}catch(NumberFormatException e){
					logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
					e.printStackTrace();
				}
			}
			try{]]></codefragment>
   </duplication>
   <duplication lines="47" tokens="311">
      <file line="226"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="218"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		}
		
		return null;
	}
	
	public String getPath() {
		return path;
	}
	public void setPath(String path) {
		this.path = path;
	}
	
	public SElement sElement(String id,String path){]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="302">
      <file line="153"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\PageContorl.java"/>
      <file line="191"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\PageContorl.java"/>
      <codefragment><![CDATA[		if(getLocatorValue()==null){
			switch(locator){
			case Id:
				this.element=getLocatorValue().findElements(By.id(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Xpath:
				this.element=getLocatorValue().findElements(By.xpath(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case LinkText:
				this.element=getLocatorValue().findElements(By.linkText(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case PartialLinkText:
				this.element=getLocatorValue().findElements(By.partialLinkText(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case TagName:
				this.element=getLocatorValue().findElements(By.tagName(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Class:
				this.element=getLocatorValue().findElements(By.className(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Css:
				this.element=getLocatorValue().findElements(By.cssSelector(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Name:
				this.element=getLocatorValue().findElements(By.name(value)).get(index);
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			default:
				logger.error("定位方式选择错误！没有加入成功！");
				throw new MyAutoException("选择的定位方式不支持！");
			}
		}else{]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="293">
      <file line="31"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\BaseJUnitAutoRunner.java"/>
      <file line="33"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\DefaultJUnitAutoRunner.java"/>
      <file line="21"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\MyJUnitThreadRunner.java"/>
      <codefragment><![CDATA[	public BaseJUnitAutoRunner(final Class<?> klass)
			throws InitializationError {
		super(klass);
		setScheduler(new RunnerScheduler() {
			ExecutorService executorService = Executors.newFixedThreadPool(
                    klass.isAnnotationPresent(ThreadRunner.class) ?
                            klass.getAnnotation(ThreadRunner.class).threads() :
                            (int) (Runtime.getRuntime().availableProcessors() * 1.5),
                    new NamedThreadFactory(klass.getSimpleName()));
            CompletionService<Void> completionService = new ExecutorCompletionService<Void>(executorService);
            Queue<Future<Void>> tasks = new LinkedList<Future<Void>>();
			
			public void schedule(Runnable childStatement) {
				tasks.offer(completionService.submit(childStatement, null));
			}
			
			
			public void finished() {
				try {
                    while (!tasks.isEmpty())
                        tasks.remove(completionService.take());
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    while (!tasks.isEmpty())
                        tasks.poll().cancel(true);
                    executorService.shutdownNow();
                }
			}
			
		});
	}
	static final class NamedThreadFactory implements ThreadFactory {
        static final AtomicInteger poolNumber = new AtomicInteger(1);
        final AtomicInteger threadNumber = new AtomicInteger(1);
        final ThreadGroup group;

        NamedThreadFactory(String poolName) {
            group = new ThreadGroup(poolName + "-" + poolNumber.getAndIncrement());
        }

        
        public Thread newThread(Runnable r) {
            return new Thread(group, r, group.getName() + "-thread-" + threadNumber.getAndIncrement(), 0);
        }
    }]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="293">
      <file line="101"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="94"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				}catch(Exception e){
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				if(xn.getXMLChildElements().size()!=0){
					for(XMLChildElement xce:xn.getXMLChildElements()){
						int cindex=0;
						if(xce.getIndex()!=null){
							try{
								cindex=Integer.parseInt(xf.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的child元素"+xce.getValue()+"的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
		}
		return we;
	}
	
	public synchronized List<WebElement> elements(String id,String path){
		WebElement we=null;
		XmlToJavaTools xtj = new XmlToJavaTools();
		XMLDocument xd = new XMLDocument(path);
		XMLElements xe = new XMLElements(xd);
		XMLElement xn =xe.getXMLElementOfAll(id);
		if(xn.getElement().getParent().getName().equals("list")){
			Window.selectDefaultWindow();
			if(xn.getXMLChildElements().size()==0){
				try {
					return browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue()));]]></codefragment>
   </duplication>
   <duplication lines="46" tokens="280">
      <file line="22"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\MyJUnitThreadRunner.java"/>
      <file line="53"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\MyJUnitThreadSuitRunner.java"/>
      <codefragment><![CDATA[		super(klass);
		setScheduler(new RunnerScheduler() {
			ExecutorService executorService = Executors.newFixedThreadPool(
                    klass.isAnnotationPresent(ThreadRunner.class) ?
                            klass.getAnnotation(ThreadRunner.class).threads() :
                            (int) (Runtime.getRuntime().availableProcessors() * 1.5),
                    new NamedThreadFactory(klass.getSimpleName()));
            CompletionService<Void> completionService = new ExecutorCompletionService<Void>(executorService);
            Queue<Future<Void>> tasks = new LinkedList<Future<Void>>();
			
			public void schedule(Runnable childStatement) {
				tasks.offer(completionService.submit(childStatement, null));
			}
			
			
			public void finished() {
				try {
                    while (!tasks.isEmpty())
                        tasks.remove(completionService.take());
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    while (!tasks.isEmpty())
                        tasks.poll().cancel(true);
                    executorService.shutdownNow();
                }
			}
			
		});
	}
	
	 static final class NamedThreadFactory implements ThreadFactory {
	        static final AtomicInteger poolNumber = new AtomicInteger(1);
	        final AtomicInteger threadNumber = new AtomicInteger(1);
	        final ThreadGroup group;

	        NamedThreadFactory(String poolName) {
	            group = new ThreadGroup(poolName + "-" + poolNumber.getAndIncrement());
	        }

	        
	        public Thread newThread(Runnable r) {
	            return new Thread(group, r, group.getName() + "-thread-" + threadNumber.getAndIncrement(), 0);
	        }
	    }
	}]]></codefragment>
   </duplication>
   <duplication lines="44" tokens="279">
      <file line="33"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\BaseJUnitAutoRunner.java"/>
      <file line="35"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\DefaultJUnitAutoRunner.java"/>
      <file line="53"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\MyJUnitThreadSuitRunner.java"/>
      <codefragment><![CDATA[		super(klass);
		setScheduler(new RunnerScheduler() {
			ExecutorService executorService = Executors.newFixedThreadPool(
                    klass.isAnnotationPresent(ThreadRunner.class) ?
                            klass.getAnnotation(ThreadRunner.class).threads() :
                            (int) (Runtime.getRuntime().availableProcessors() * 1.5),
                    new NamedThreadFactory(klass.getSimpleName()));
            CompletionService<Void> completionService = new ExecutorCompletionService<Void>(executorService);
            Queue<Future<Void>> tasks = new LinkedList<Future<Void>>();
			
			public void schedule(Runnable childStatement) {
				tasks.offer(completionService.submit(childStatement, null));
			}
			
			
			public void finished() {
				try {
                    while (!tasks.isEmpty())
                        tasks.remove(completionService.take());
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                } finally {
                    while (!tasks.isEmpty())
                        tasks.poll().cancel(true);
                    executorService.shutdownNow();
                }
			}
			
		});
	}
	static final class NamedThreadFactory implements ThreadFactory {
        static final AtomicInteger poolNumber = new AtomicInteger(1);
        final AtomicInteger threadNumber = new AtomicInteger(1);
        final ThreadGroup group;

        NamedThreadFactory(String poolName) {
            group = new ThreadGroup(poolName + "-" + poolNumber.getAndIncrement());
        }

        
        public Thread newThread(Runnable r) {
            return new Thread(group, r, group.getName() + "-thread-" + threadNumber.getAndIncrement(), 0);
        }
    }]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="274">
      <file line="155"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="218"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		} else if(xn.getElement().getParent().getName().equals("frame")){]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="274">
      <file line="226"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="148"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
				for(int i=0;i<xn.getXMLChildElements().size();i++){
					if(i==xn.getXMLChildElements().size()-1){
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						try {
							return we.findElements(xtj.locator(xce.getBy(), xce.getValue()));
						} catch (Exception e) {
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}else{
						int cindex =0;
						XMLChildElement xce = xn.getXMLChildElements().get(i);
						if(xce.getIndex()!=null){
							try{
								index=Integer.parseInt(xn.getIndex());
							}catch(NumberFormatException e){
								logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xce.getBy(), xce.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的时候,出现错误！");
							e.printStackTrace();
						}
					}
				}
			}
		}]]></codefragment>
   </duplication>
   <duplication lines="36" tokens="273">
      <file line="49"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="43"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}	
				if(((XMLElement) xn).getXMLChildElements().size()!=0){
					for(XMLChildElement xc : ((XMLElement)xn).getXMLChildElements()){
						int cindex=0;
						if(xc.getIndex()!=null){
							try{
								cindex=Integer.parseInt(xc.getIndex());
							}catch(NumberFormatException e1){
								logger.error("child元素["+xc.getValue()+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
								e1.printStackTrace();
							}
						}
						try{
							we=we.findElements(xtj.locator(xc.getBy(), xc.getValue())).get(cindex);
						}catch(Exception e){
							logger.error("定位元素["+id+"]的child元素的时候,出现错误！");
						}
					}
				}
			}else{
				XMLFrame xf = new XMLFrame();
				xf.setElement(xn.getElement().getParent());
				int pindex=0;
				if(xf.getIndex()!=null){
					try{
						pindex=Integer.parseInt(xf.getIndex());
					}catch(NumberFormatException e){
						logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
						e.printStackTrace();
					}
				}
				try{]]></codefragment>
   </duplication>
   <duplication lines="45" tokens="270">
      <file line="33"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLElements.java"/>
      <file line="19" path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLList.java"/>
      <codefragment><![CDATA[	public List<XMLElement> getXMLElementList(){
		List<XMLElement> elist = new ArrayList<XMLElement>();
		Iterator<?> iter = e.elementIterator("element");
		while(iter.hasNext()){
			Element ee=(Element) iter.next();
			if(ee.getParent().isRootElement()){
				XMLElement xe = new XMLElement();
				xe.setElement(ee);
				elist.add(xe);
			}
		}
		return elist;
	}
	
	public XMLElement getXMLElement(String id){
		for(XMLElement xe:getXMLElementList()){
			if(xe.getElement().attributeValue("id").equals(id)){
				return xe;
			}
		}
		return null;
	}
	
	public List<XMLFrame> getXMLFrameList(){
		List<XMLFrame> elist = new ArrayList<XMLFrame>();
		Iterator<?> iter = e.elementIterator("frame");
		while(iter.hasNext()){
			Element ee=(Element) iter.next();
			if(ee.getParent().isRootElement()){
				XMLFrame xf = new XMLFrame();
				xf.setElement(ee);
				elist.add(xf);
			}
		}
		return elist;
	}
	
	public XMLFrame getXMLFrame(String id){
		for(XMLFrame xf : getXMLFrameList()){
			if(xf.getElement().attributeValue("id").equals(id)){
				return xf;
			}
		}
		return null;
	}]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="262">
      <file line="69"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\PageContorl.java"/>
      <file line="107"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\PageContorl.java"/>
      <codefragment><![CDATA[		if(getLocatorValue()==null){
			switch(locator){
			case Id:
				this.element=getLocatorValue().findElement(By.id(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Xpath:
				this.element=getLocatorValue().findElement(By.xpath(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case LinkText:
				this.element=getLocatorValue().findElement(By.linkText(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case PartialLinkText:
				this.element=getLocatorValue().findElement(By.partialLinkText(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case TagName:
				this.element=getLocatorValue().findElement(By.tagName(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Class:
				this.element=getLocatorValue().findElement(By.className(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Css:
				this.element=getLocatorValue().findElement(By.cssSelector(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			case Name:
				this.element=getLocatorValue().findElement(By.name(value));
				ProxyRunnerListener.getDispatcher().afteraddLocator();
				break;
			default:
				logger.error("定位方式选择错误！没有加入成功！");
				throw new MyAutoException("选择的定位方式不支持！");
			}
		}else{]]></codefragment>
   </duplication>
   <duplication lines="37" tokens="217">
      <file line="104"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\BaseJUnitAutoRunner.java"/>
      <file line="106"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\runner\DefaultJUnitAutoRunner.java"/>
      <codefragment><![CDATA[		if(getDescription().getAnnotation(JUnitRunListener.class)!=null){
			JUnitRunListener jrl = getDescription().getAnnotation(JUnitRunListener.class);
			Class<?>[] rls = jrl.value();
			for(Class<?> rl : rls){
				try {
					rn.addListener((RunListener) rl.newInstance());
				} catch (InstantiationException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		if(ProxyJUnitRunListener.dispatcher().size()!=0){
			for(RunListener rl:ProxyJUnitRunListener.dispatcher()){
				rn.addListener(rl);
			}
		}
		Set<Class<?>> cls = ClassPool.getClassPool();
		for(Class<?>clazz : cls){
			if(clazz.isAnnotationPresent(RunListenerRegister.class)){
				try {
					ProxyJUnitRunListener.register((RunListener) clazz.newInstance());
				} catch (InstantiationException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			}
		}
		
		
		super.run(rn);
	}
}]]></codefragment>
   </duplication>
   <duplication lines="39" tokens="204">
      <file line="17"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLElement.java"/>
      <file line="17"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLFrame.java"/>
      <codefragment><![CDATA[	public Element getElement() {
		return e;
	}
	public void setElement(Element e) {
		this.e = e;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String,String> getAttributes(){
		Map<String,String> amap = new HashMap<String,String>();
		List<Attribute> alist = getElement().attributes();
		for(int i=0;i<alist.size();i++){
			amap.put(alist.get(i).getName(), alist.get(i).getValue());
		}
		return amap;
	}
	
	public String getId(){
		return getAttributes().get("id");
	}
	
	public String getValue(){
		return getAttributes().get("value");
	}
	
	public String getIndex(){
		return getAttributes().get("index");
	}
	
	public String getBy(){
		return getAttributes().get("by");
	}
	
	@SuppressWarnings("unchecked")
	public List<Attribute> getAttributeList(){
		return getElement().attributes();
	}
	
	public List<XMLChildElement> getXMLChildElements(){]]></codefragment>
   </duplication>
   <duplication lines="20" tokens="141">
      <file line="113"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\ComoboBox.java"/>
      <file line="134"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\element\ComoboBox.java"/>
      <codefragment><![CDATA[		}
	}
	/**如果选择了多项，那么使用此方法可以获得多个选项的索引值*/
	public int[] getSelectedIndexs(){
		int[] indexs = null;
		if(isExist()){
			List<WebElement> selectedItems =getSelect().getAllSelectedOptions();
			List<WebElement> allItems = getSelect().getOptions();
			indexs=new int[selectedItems.size()];
			for(int i=0;i<selectedItems.size();i++){
				for(int j=0;j<selectedItems.size();j++){
					if(selectedItems.get(i).equals(allItems.get(j))){
						indexs[i]=j;break;
					}
				}
			}
			logger.info("获得全部选中项内容成功");
			return indexs;	
		}else{
			logger.error("元素没有找到，获得索引值失败！");]]></codefragment>
   </duplication>
   <duplication lines="27" tokens="140">
      <file line="28"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\mail\SimpleMailSender.java"/>
      <file line="111"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\mail\SimpleMailSender.java"/>
      <codefragment><![CDATA[	    public boolean sendTextMail(MailSenderInfo mailInfo) {   
	      // 判断是否需要身份认证   
	      SimpleAuthenticator authenticator = null;   
	      Properties pro = mailInfo.getProperties();  
	      if (mailInfo.isValidate()) {   
	      // 如果需要身份认证，则创建一个密码验证器   
	        authenticator = new SimpleAuthenticator(mailInfo.getUserName(), mailInfo.getPassword());   
	      }  
	      // 根据邮件会话属性和密码验证器构造一个发送邮件的session   
	      Session sendMailSession = Session.getDefaultInstance(pro,authenticator);   
	      try {   
	      // 根据session创建一个邮件消息   
	      Message mailMessage = new MimeMessage(sendMailSession);   
	      // 创建邮件发送者地址   
	      Address from = new InternetAddress(mailInfo.getFromAddress());   
	      // 设置邮件消息的发送者   
	      mailMessage.setFrom(from);   
	      // 创建邮件的接收者地址，并设置到邮件消息中   
	      Address to = new InternetAddress(mailInfo.getToAddress());   
	      mailMessage.setRecipient(Message.RecipientType.TO,to);   
	      // 设置邮件消息的主题   
	      mailMessage.setSubject(mailInfo.getSubject());   
	      // 设置邮件消息发送的时间   
	      mailMessage.setSentDate(new Date());   
	      // 设置邮件消息的主要内容   
	      String mailContent = mailInfo.getContent();   
	      mailMessage.setText(mailContent);   ]]></codefragment>
   </duplication>
   <duplication lines="35" tokens="128">
      <file line="190"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\base\MyFile.java"/>
      <file line="25"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\intrumentation\FileFinder.java"/>
      <codefragment><![CDATA[		if (f.isDirectory() && isDepth == true) {

			File[] t = f.listFiles();

			for (int i = 0; i < t.length; i++) {

				listFile(t[i], suffix, isDepth);

			}
		} else {

			String filePath = f.getAbsolutePath();

			if (suffix != null) {

				int begIndex = filePath.lastIndexOf(".");

				String tempsuffix = "";

				if (begIndex != -1) {

					tempsuffix = filePath.substring(begIndex + 1,
							filePath.length());

				}
				if (tempsuffix.equals(suffix)) {

					fileList.add(filePath);// 
				}
			}
		}

		return fileList;

	}]]></codefragment>
   </duplication>
   <duplication lines="24" tokens="126">
      <file line="28"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\mail\SimpleMailSender.java"/>
      <file line="68"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\mail\SimpleMailSender.java"/>
      <file line="111"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\mail\SimpleMailSender.java"/>
      <codefragment><![CDATA[	    public boolean sendTextMail(MailSenderInfo mailInfo) {   
	      // 判断是否需要身份认证   
	      SimpleAuthenticator authenticator = null;   
	      Properties pro = mailInfo.getProperties();  
	      if (mailInfo.isValidate()) {   
	      // 如果需要身份认证，则创建一个密码验证器   
	        authenticator = new SimpleAuthenticator(mailInfo.getUserName(), mailInfo.getPassword());   
	      }  
	      // 根据邮件会话属性和密码验证器构造一个发送邮件的session   
	      Session sendMailSession = Session.getDefaultInstance(pro,authenticator);   
	      try {   
	      // 根据session创建一个邮件消息   
	      Message mailMessage = new MimeMessage(sendMailSession);   
	      // 创建邮件发送者地址   
	      Address from = new InternetAddress(mailInfo.getFromAddress());   
	      // 设置邮件消息的发送者   
	      mailMessage.setFrom(from);   
	      // 创建邮件的接收者地址，并设置到邮件消息中   
	      Address to = new InternetAddress(mailInfo.getToAddress());   
	      mailMessage.setRecipient(Message.RecipientType.TO,to);   
	      // 设置邮件消息的主题   
	      mailMessage.setSubject(mailInfo.getSubject());   
	      // 设置邮件消息发送的时间   
	      mailMessage.setSentDate(new Date());   ]]></codefragment>
   </duplication>
   <duplication lines="22" tokens="124">
      <file line="10"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLChildElement.java"/>
      <file line="13"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLFrame.java"/>
      <codefragment><![CDATA[public class XMLChildElement implements XMLNode{
	private Element e;

	public Element getElement() {
		return e;
	}

	public void setElement(Element e) {
		this.e = e;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String,String> getAttributes(){
		Map<String,String> amap = new HashMap<String,String>();
		List<Attribute> alist = getElement().attributes();
		for(int i=0;i<alist.size();i++){
			amap.put(alist.get(i).getName(), alist.get(i).getValue());
		}
		return amap;
	}
	
	public String getValue(){]]></codefragment>
   </duplication>
   <duplication lines="19" tokens="118">
      <file line="13"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLChildElement.java"/>
      <file line="17"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLElement.java"/>
      <codefragment><![CDATA[	public Element getElement() {
		return e;
	}

	public void setElement(Element e) {
		this.e = e;
	}
	
	@SuppressWarnings("unchecked")
	public Map<String,String> getAttributes(){
		Map<String,String> amap = new HashMap<String,String>();
		List<Attribute> alist = getElement().attributes();
		for(int i=0;i<alist.size();i++){
			amap.put(alist.get(i).getName(), alist.get(i).getValue());
		}
		return amap;
	}
	
	public String getValue(){]]></codefragment>
   </duplication>
   <duplication lines="16" tokens="108">
      <file line="86"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="79"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					browser.frame(browser.browser().findElements(xtj.locator(xf.getBy(), xf.getValue())).get(pindex));
				}catch(Exception e){
					logger.error("定位元素["+id+"]的时候,出现错误！进行切换frame的时候定位出错！");
					e.printStackTrace();
				}
				int index=0;
				if(xf.getIndex()!=null){
					try{
						index=Integer.parseInt(xf.getIndex());
					}catch(NumberFormatException e){
						logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
						e.printStackTrace();
					}
				}
				try{
					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);]]></codefragment>
   </duplication>
   <duplication lines="8" tokens="107">
      <file line="33"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\browser\element\Table.java"/>
      <file line="49"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\element\Table.java"/>
      <codefragment><![CDATA[				content=getLocatorValue().findElement(By.xpath(".//tr["+(row)+"]/td{"+(col)+"]")).getText();
				logger.info("第"+(row+1)+"行，第"+(col+1)+"列的元素获取成功！");
			}catch(Exception e){
				logger.info("第"+(row+1)+"行，第"+(col+1)+"列的元素获取失败！找不到这个table元素！");
			}
			return content;
		}else{
			logger.error("第"+(row+1)+"行，第"+(col+1)+"列的元素获取成功！");]]></codefragment>
   </duplication>
   <duplication lines="17" tokens="105">
      <file line="139"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="210"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XMLBrowserProvider.java"/>
      <file line="132"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <file line="202"
            path="G:\workspace\s-tea\src\main\java\org\sky\auto\xml\XmlProvider.java"/>
      <codefragment><![CDATA[					return browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue()));
				} catch (Exception e) {
					logger.error("定位元素["+id+"]的时候,出现错误！");
					e.printStackTrace();
				}
			}else{
				int index = 0;
				if(xn.getIndex()!=null){
					try{
						index=Integer.parseInt(xn.getIndex());
					}catch(NumberFormatException e){
						logger.error("元素["+id+"]的index值不能够被转化成为int类型，index的属性值输入错误！");
						e.printStackTrace();
					}
				}
				try {
					we=browser.browser().findElements(xtj.locator(xn.getBy(), xn.getValue())).get(index);]]></codefragment>
   </duplication>
</pmd-cpd>